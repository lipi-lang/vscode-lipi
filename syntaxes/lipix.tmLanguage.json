{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Lipi Extended",
  "patterns": [{ "include": "#top-level" }],
  "repository": {
    "comment": {
      "patterns": [
        { "include": "#comment-block" },
        { "include": "#comment-line" },
        { "include": "#comment-doc" }
      ]
    },
    "comment-block": {
      "name": "comment.block.lipi",
      "begin": "#(%*)\\[",
      "end": "\\]\\1#",
      "patterns": [{ "include": "#comment-block" }]
    },
    "comment-line": {
      "name": "comment.line.lipi",
      "begin": "#",
      "end": "\n"
    },
    "comment-doc": {
      "name": "comment.block.lipi",
      "begin": "@\"{3}",
      "end": "\"{3}"
    },
    "common-pattern": {
      "patterns": [
        {
          "name": "keyword",
          "match": "(?<![[:alnum:]'_.-])_(?![[:alnum:]'_.-])"
        },
        {
          "begin": "(%\\{)",
          "end": "(\\})",
          "patterns": [
            {
              "match": "(:[[:alpha:]][[:alnum:]'_-]*)\\s*(=>)\\s*([^,}]+)",
              "captures": {
                "1": { "name": "keyword.control" },
                "2": { "name": "keyword.operator" },
                "3": { "patterns": [{ "include": "#expression" }] }
              }
            },
            {
              "match": "(:[[:alpha:]][[:alnum:]'_-]*)\\s*(@)\\s*([[:alpha:]][[:alnum:]'_-]*)(?:\\s*(=>)\\s*([^,}]+))?",
              "captures": {
                "1": { "name": "keyword.control" },
                "2": { "name": "keyword" },
                "3": { "name": "variable.parameter" },
                "4": { "name": "keyword.operator" },
                "5": { "patterns": [{ "include": "#expression" }] }
              }
            },
            {
              "match": "((:@)[[:alpha:]][[:alnum:]'_-]*)(?:\\s*(=>)\\s*([^,}]+))?",
              "captures": {
                "1": { "name": "variable.parameter" },
                "2": { "name": "keyword.control" },
                "3": { "name": "keyword.operator" },
                "4": { "patterns": [{ "include": "#expression" }] }
              }
            }
          ]
        },
        {
          "begin": "(\\{)",
          "end": "(\\})",
          "patterns": [
            { "name": "keyword", "match": "\\|" },
            { "include": "#common-pattern" }
          ]
        },
        {
          "begin": "(\\[)",
          "end": "(\\])",
          "patterns": [
            { "name": "keyword", "match": "\\|" },
            { "include": "#common-pattern" }
          ]
        },
        {
          "name": "variable.parameter",
          "match": "([[:alpha:]_][[:alnum:]'_-]*)"
        },
        { "include": "#expression" }
      ]
    },
    "common-typed-param": {
      "patterns": [
        { "include": "#common-pattern" },
        {
          "match": "(:)\\s*([[:alpha:]_][[:alnum:]'._-]*)",
          "captures": {
            "1": { "name": "keyword.operator" },
            "2": { "name": "entity.name.type" }
          }
        }
      ]
    },
    "top-level": {
      "patterns": [
        { "include": "#comment" },
        { "include": "#declaration" },
        { "include": "#expression" }
      ]
    },
    "declaration": {
      "patterns": [
        { "include": "#declaration-module" },
        { "include": "#declaration-type" },
        { "include": "#declaration-alias" },
        { "include": "#declaration-function" },
        { "include": "#declaration-test" },
        { "include": "#declaration-binding" }
      ]
    },
    "declaration-module": {
      "match": "(?<=^|\\s)(defmodule)\\s+([[:alpha:]_][[:alnum:]'_-]*)\\s*(\\*)?",
      "captures": {
        "1": { "name": "keyword" },
        "2": { "name": "entity.name.class" },
        "3": { "name": "keyword.operator" }
      }
    },
    "declaration-type": {
      "match": "(?<=^|\\s)(deftype)\\s+([[:alpha:]_][[:alnum:]'_-]*)\\s*(\\*)?\\s+(=)",
      "captures": {
        "1": { "name": "keyword" },
        "2": { "name": "entity.name.type" },
        "3": { "name": "keyword.operator" },
        "4": { "name": "keyword" }
      }
    },
    "declaration-alias": {
      "match": "(?<=^|\\s)(defalias)\\s+([[:alpha:]_][[:alnum:]'_-]*)\\s*(\\*)?\\s+(=)",
      "captures": {
        "1": { "name": "keyword" },
        "2": { "name": "entity.name.type" },
        "3": { "name": "keyword.operator" },
        "4": { "name": "keyword" }
      }
    },
    "declaration-function": {
      "match": "(?<=^|\\s)(def)\\s+([[:alpha:]_][[:alnum:]'_-]*)\\s*(\\*)?\\s*(\\((.*)\\))(\\s*(:)\\s+([[:alpha:]_][[:alnum:]'._-]*))?",
      "captures": {
        "1": { "name": "keyword" },
        "2": { "name": "entity.name.function" },
        "3": { "name": "keyword.operator" },
        "5": { "patterns": [{ "include": "#common-typed-param" }] },
        "7": { "name": "keyword.operator" },
        "8": { "name": "entity.name.type" },
        "9": { "name": "keyword" }
      }
    },
    "declaration-test": {
      "match": "(?<=^|\\s)(deftest)\\s+(\".*\")",
      "captures": {
        "1": { "name": "keyword" },
        "2": { "name": "entity.name.function" },
        "3": { "name": "keyword" }
      }
    },
    "declaration-binding": {
      "patterns": [
        {
          "match": "^(?!.*(?:deftype|defalias).*)(.*)(=)(?=\\w|\\s)",
          "captures": {
            "1": { "patterns": [{ "include": "#common-pattern" }] },
            "2": { "name": "keyword.operator" }
          }
        }
      ]
    },
    "expression": {
      "patterns": [
        { "include": "#expression-literal" },
        { "include": "#expression-closure" },
        { "include": "#expression-function-invocation" },
        { "include": "#expression-if" },
        { "include": "#expression-case" },
        { "include": "#expression-do-block" }
      ]
    },
    "expression-literal": {
      "patterns": [
        {
          "type": "character literal expression",
          "name": "string.other",
          "match": "\\\\(?:\\\\(u\\{[[:alnum:]]*}|[^\\s\\}\\]\\)]+)|.(?=[\\s\\}\\]\\)]))"
        },
        {
          "type": "string literal expression",
          "patterns": [
            { "include": "#expression-literal-string-triple-raw" },
            { "include": "#expression-literal-string-triple-format" },
            { "include": "#expression-literal-string-triple-static" },
            { "include": "#expression-literal-string-raw" },
            { "include": "#expression-literal-string-format" },
            { "include": "#expression-literal-string-static" }
          ]
        },
        {
          "type": "atom literal expression",
          "name": "keyword.control",
          "match": ":[[:alpha:]][[:alnum:]'_-]*"
        },
        {
          "type": "number literal expression",
          "name": "constant.numeric",
          "match": "(?<![[:alnum:]'._-])[0-9]+(?:\\.[0-9]+)?"
        }
      ]
    },
    "expression-literal-string-escape": {
      "name": "constant.character.escape",
      "match": "(\\\\(?:x[A-Fa-f0-9]{2}|u{[A-fa-f0-9]{1,6}}|.|\\s))"
    },
    "expression-literal-string-interpolated-content": {
      "begin": "(?<!{){(?!{)",
      "end": "}(?:%[.<^>][[:digit:]]+)?",
      "beginCaptures": {
        "0": { "name": "constant.character.interpolation" }
      },
      "endCaptures": {
        "0": { "name": "constant.character.interpolation" }
      },
      "contentName": "meta.embedded meta.embedded.line meta.template.expression",
      "patterns": [{ "include": "#expression" }]
    },
    "expression-literal-string-triple-raw": {
      "name": "string.quoted.triple.raw",
      "begin": "r(%*)\"{3}",
      "end": "\"{3}\\1"
    },
    "expression-literal-string-triple-format": {
      "name": "string.quoted.triple.format",
      "begin": "f(%*)\"{3}",
      "end": "\"{3}\\1",
      "patterns": [
        { "include": "#expression-literal-string-escape" },
        { "include": "#expression-literal-string-interpolated-content" }
      ]
    },
    "expression-literal-string-triple-static": {
      "name": "string.quoted.triple",
      "begin": "(%*)\"{3}",
      "end": "\"{3}\\1",
      "patterns": [{ "include": "#expression-literal-string-escape" }]
    },
    "expression-literal-string-raw": {
      "name": "string.quoted.double.raw",
      "begin": "r(%*)\"",
      "end": "\"\\1"
    },
    "expression-literal-string-format": {
      "name": "string.quoted.double.format",
      "begin": "f(%*)\"",
      "end": "\"\\1",
      "patterns": [
        { "include": "#expression-literal-string-escape" },
        { "include": "#expression-literal-string-interpolated-content" }
      ]
    },
    "expression-literal-string-static": {
      "name": "string.quoted.double",
      "begin": "(%*)\"",
      "end": "\"\\1",
      "patterns": [{ "include": "#expression-literal-string-escape" }]
    },
    "expression-closure": {
      "match": "(?<=^|\\s|=)(fn)\\s*(\\((.*)\\))(\\s*(:)\\s+([[:alpha:]_][[:alnum:]'._-]*))?",
      "captures": {
        "1": { "name": "keyword" },
        "3": { "patterns": [{ "include": "#common-typed-param" }] },
        "5": { "name": "keyword.operator" },
        "6": { "name": "entity.name.type" }
      }
    },
    "expression-function-invocation": {
      "match": "((?:[[:alpha:]][[:alnum:]'_-]*\\.)+)?([[:alpha:]_][[:alnum:]'_-]*)(?=\\w*\\()",
      "captures": {
        "1": {
          "name": "entity.name.class",
          "patterns": [{ "name": "keyword.operator", "match": "\\." }]
        },
        "2": { "name": "entity.name.function" }
      }
    },
    "expression-if": {
      "begin": "(?<=^|\\s)(if)(.*)(do)",
      "end": "(end)",
      "beginCaptures": {
        "1": { "name": "keyword" },
        "2": { "patterns": [{ "include": "#expression" }] },
        "3": { "name": "keyword" }
      },
      "endCaptures": {
        "1": { "name": "keyword" }
      },
      "patterns": [{ "include": "#top-level" }]
    },
    "expression-case": {
      "begin": "(?<=^|\\s)(case)(.*)(do)",
      "end": "(end)",
      "beginCaptures": {
        "1": { "name": "keyword" },
        "2": { "patterns": [{ "include": "#expression" }] },
        "3": { "name": "keyword" }
      },
      "endCaptures": {
        "1": { "name": "keyword" }
      },
      "patterns": [
        {
          "match": "(.*)(->)",
          "captures": {
            "1": { "patterns": [{ "include": "#common-pattern" }] },
            "2": { "name": "keyword" }
          }
        },
        { "include": "#expression" }
      ]
    },
    "expression-do-block": {
      "begin": "(do)",
      "end": "(end)",
      "beginCaptures": {
        "1": { "name": "keyword" }
      },
      "endCaptures": {
        "1": { "name": "keyword" }
      },
      "patterns": [{ "include": "#top-level" }]
    }
  },
  "scopeName": "source.lipi-extended"
}
