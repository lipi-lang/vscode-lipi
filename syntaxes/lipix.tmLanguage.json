{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Lipi Extended",
  "patterns": [{ "include": "#comment" }, { "include": "#top-level" }],
  "repository": {
    "common-pattern": {
      "patterns": [
        {
          "name": "keyword",
          "match": "(?<![[:alnum:]'_.-])_(?![[:alnum:]'_.-])"
        },
        {
          "begin": "(%\\{)",
          "end": "(\\})",
          "patterns": [
            {
              "match": "(:[[:alpha:]][[:alnum:]'_-]*)\\s*(=>)\\s*([^,}]+)",
              "captures": {
                "1": { "name": "keyword.control" },
                "2": { "name": "keyword" },
                "3": { "patterns": [{ "include": "#expression" }] }
              }
            },
            {
              "match": "(:[[:alpha:]][[:alnum:]'_-]*)\\s*(@)\\s*([[:alpha:]][[:alnum:]'_-]*)(?:\\s*(=>)\\s*([^,}]+))?",
              "captures": {
                "1": { "name": "keyword.control" },
                "2": { "name": "keyword" },
                "3": { "name": "variable.parameter" },
                "4": { "name": "keyword" },
                "5": { "patterns": [{ "include": "#expression" }] }
              }
            },
            {
              "match": "((:@)[[:alpha:]][[:alnum:]'_-]*)(?:\\s*(=>)\\s*([^,}]+))?",
              "captures": {
                "1": { "name": "variable.parameter" },
                "2": { "name": "keyword.control" },
                "3": { "name": "keyword" },
                "4": { "patterns": [{ "include": "#expression" }] }
              }
            }
          ]
        },
        {
          "begin": "(\\{)",
          "end": "(\\})",
          "patterns": [
            { "name": "keyword", "match": "\\|" },
            { "include": "#common-pattern" }
          ]
        },
        {
          "begin": "(\\[)",
          "end": "(\\])",
          "patterns": [
            { "name": "keyword", "match": "\\|" },
            { "include": "#common-pattern" }
          ]
        },
        {
          "name": "variable.parameter",
          "match": "([[:alpha:]_][[:alnum:]'_-]*)"
        },
        { "include": "#expression" }
      ]
    },
    "common-typed-param": {
      "patterns": [
        { "include": "#common-pattern" },
        {
          "match": "(:)\\s*([[:alpha:]_][[:alnum:]'._-]*)",
          "captures": {
            "1": { "name": "keyword" },
            "2": { "name": "entity.name.type" }
          }
        }
      ]
    },
    "comment": {
      "patterns": [
        { "include": "#comment-block" },
        { "include": "#comment-line" }
      ]
    },
    "comment-line": {
      "name": "comment.line.lipi",
      "begin": "#",
      "end": "\n"
    },
    "comment-block": {
      "name": "comment.block.lipi",
      "begin": "#(%*)\\[",
      "end": "\\]\\1#",
      "patterns": [{ "include": "#comment-block" }]
    },
    "top-level": {
      "patterns": [{ "include": "#declaration" }, { "include": "#expression" }]
    },
    "declaration": {
      "patterns": [
        { "include": "#comment" },
        { "include": "#declaration-module" },
        { "include": "#declaration-type" },
        { "include": "#declaration-alias" },
        { "include": "#declaration-function" },
        { "include": "#declaration-test" },
        { "include": "#declaration-binding" }
      ]
    },
    "declaration-module": {
      "begin": "(?<=^|\\s)(defmodule)\\s+([[:alpha:]_][[:alnum:]'_-]*)\\s*(\\*)?\\s+(is)",
      "end": "(end)",
      "beginCaptures": {
        "1": { "name": "keyword" },
        "2": { "name": "entity.name.class" },
        "3": { "name": "keyword.operator" },
        "4": { "name": "keyword" }
      },
      "endCaptures": {
        "1": { "name": "keyword" }
      },
      "patterns": [{ "include": "#declaration" }]
    },
    "declaration-type": {
      "match": "(?<=^|\\s)(deftype)\\s+([[:alpha:]_][[:alnum:]'_-]*)\\s*(\\*)?\\s+(=)",
      "captures": {
        "1": { "name": "keyword" },
        "2": { "name": "entity.name.type" },
        "3": { "name": "keyword.operator" },
        "4": { "name": "keyword" }
      }
    },
    "declaration-alias": {
      "match": "(?<=^|\\s)(defalias)\\s+([[:alpha:]_][[:alnum:]'_-]*)\\s*(\\*)?\\s+(=)",
      "captures": {
        "1": { "name": "keyword" },
        "2": { "name": "entity.name.type" },
        "3": { "name": "keyword.operator" },
        "4": { "name": "keyword" }
      }
    },
    "declaration-function": {
      "begin": "(?<=^|\\s)(def)\\s+([[:alpha:]_][[:alnum:]'_-]*)\\s*(\\*)?\\s*(\\((.*)\\))(\\s*(:)\\s+([[:alpha:]_][[:alnum:]'._-]*))?\\s+(is)",
      "end": "(end)",
      "beginCaptures": {
        "1": { "name": "keyword" },
        "2": { "name": "entity.name.function" },
        "3": { "name": "keyword.operator" },
        "5": { "patterns": [{ "include": "#common-typed-param" }] },
        "7": { "name": "keyword.operator" },
        "8": { "name": "entity.name.type" },
        "9": { "name": "keyword" }
      },
      "endCaptures": {
        "1": { "name": "keyword" }
      },
      "patterns": [{ "include": "#declaration" }, { "include": "#expression" }]
    },
    "declaration-test": {
      "begin": "(?<=^|\\s)(deftest)\\s+(\".*\")\\s*(is)",
      "end": "(end)",
      "beginCaptures": {
        "1": { "name": "keyword" },
        "2": { "name": "entity.name.function" },
        "3": { "name": "keyword" }
      },
      "endCaptures": {
        "1": { "name": "keyword" }
      },
      "patterns": [{ "include": "#declaration" }, { "include": "#expression" }]
    },
    "declaration-binding": {
      "patterns": [
        {
          "match": "^(?!.*(?:deftype|defalias).*)(.*)(=)(?=\\w|\\s)(.*)",
          "captures": {
            "1": { "patterns": [{ "include": "#common-pattern" }] },
            "2": { "name": "keyword.operator" },
            "3": { "patterns": [{ "include": "#expression" }] }
          }
        }
      ]
    },
    "expression": {
      "patterns": [
        { "include": "#expression-literal" },
        { "include": "#expression-function-invocation" },
        { "include": "#expression-if" },
        { "include": "#expression-when" }
      ]
    },
    "expression-literal": {
      "patterns": [
        {
          "type": "string literal expression",
          "name": "string",
          "begin": "(\")",
          "end": "(\")"
        },
        {
          "type": "atom literal expression",
          "name": "keyword.control",
          "match": ":[[:alpha:]][[:alnum:]'_-]*"
        },
        {
          "type": "number literal expression",
          "name": "constant.numeric",
          "match": "(?<![[:alnum:]'._-])[0-9]+(?:\\.[0-9]+)?"
        }
      ]
    },
    "expression-function-invocation": {
      "match": "((?:[[:alpha:]][[:alnum:]'_-]*\\.)+)?([[:alpha:]_][[:alnum:]'_-]*)(?=\\w*\\()",
      "captures": {
        "1": {
          "name": "entity.name.class",
          "patterns": [{ "name": "keyword.operator", "match": "\\." }]
        },
        "2": { "name": "entity.name.function" }
      }
    },
    "expression-when": {
      "begin": "(?<=^|\\s)(when)(.*)(is)",
      "end": "(end)",
      "beginCaptures": {
        "1": { "name": "keyword" },
        "2": { "patterns": [{ "include": "#expression" }] },
        "3": { "name": "keyword" }
      },
      "endCaptures": {
        "1": { "name": "keyword" }
      },
      "patterns": [
        {
          "match": "(.*)(->)(.*)",
          "captures": {
            "1": { "patterns": [{ "include": "#common-pattern" }] },
            "2": { "name": "keyword" },
            "3": { "patterns": [{ "include": "#expression" }] }
          }
        }
      ]
    }
  },
  "scopeName": "source.lipi-extended"
}
