{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Lipi Extended",
  "patterns": [{ "include": "#top-level" }],
  "repository": {
    "top-level": {
      "patterns": [
        { "include": "#comment" },
        { "include": "#annotation" },
        { "include": "#declaration" },
        { "include": "#expression" }
      ]
    },
    "comment": {
      "patterns": [
        { "include": "#comment-block" },
        { "include": "#comment-line" },
        { "include": "#comment-documentation" }
      ]
    },
    "comment-block": {
      "comment": "Block comment",
      "name": "comment.block.lipi-extended",
      "begin": "#(%*)\\[",
      "end": "\\]\\1#",
      "patterns": [{ "include": "#comment-block" }]
    },
    "comment-line": {
      "comment": "Line comment",
      "name": "comment.line.lipi-extended",
      "begin": "#",
      "end": "\n"
    },
    "comment-documentation": {
      "patterns": [
        {
          "comment": "Documentation block comment",
          "name": "comment.block.lipi-extended",
          "begin": "@(%*)\"{3}",
          "end": "\"{3}\\1"
        },
        {
          "comment": "Documentation line comment",
          "name": "comment.block.lipi-extended",
          "begin": "@(%*)\"{1}",
          "end": "\"{1}\\1"
        }
      ]
    },
    "annotation": {
      "comment": "Annotation that may appear above some declarations",
      "name": "entity.other.attribute-name.lipi-extended",
      "begin": "@\\[",
      "end": "\\]",
      "patterns": [{ "include": "#expression-literal" }]
    },
    "declaration": {
      "patterns": [
        { "include": "#declaration-import" },
        { "include": "#declaration-module" }
      ]
    },
    "declaration-import": {
      "match": "\\b(?<!-)(import)\\s+([[:alpha:]_][[:alpha:]'._-]*)",
      "captures": {
        "1": { "name": "keyword.lipi-extended" },
        "2": { "name": "entity.name.class.lipi-extended" }
      }
    },
    "declaration-module": {
      "match": "\\b(?<!-)(module)\\s+([[:alpha:]_][[:alpha:]'._-]*)",
      "captures": {
        "1": { "name": "keyword.lipi-extended" },
        "2": { "name": "entity.name.class.lipi-extended" }
      }
    },
    "expression": {
      "patterns": [{ "include": "#expression-literal" }]
    },
    "expression-literal": {
      "patterns": [
        {
          "comment": "Number literal",
          "name": "constant.numeric.lipi-extended",
          "match": "\\b(?<!-)[0-9][0-9_]*(?:\\.[0-9_]+)(?!-)\\b"
        },
        {
          "comment": "String literal",
          "patterns": [
            { "include": "#expression-literal-string-triple-raw" },
            { "include": "#expression-literal-string-triple" },
            { "include": "#expression-literal-string-raw" },
            { "include": "#expression-literal-string" }
          ]
        }
      ]
    },
    "expression-literal-string-escape": {
      "comment": "Escape sequence in string literals",
      "name": "constant.character.escape.lipi-extended",
      "match": "(\\\\(?:x[A-Fa-f0-9]{2}|u{[A-fa-f0-9]{1,6}}|.|\\s))"
    },
    "expression-literal-string-interpolated-content": {
      "comment": "Interpolated content in string literals",
      "begin": "(?<!\\\\)\\\\\\(",
      "end": "\\)(?:%[.<^>][[:digit:]]+)?",
      "beginCaptures": {
        "0": { "name": "constant.character.interpolation.lipi-extended" }
      },
      "endCaptures": {
        "0": { "name": "constant.character.interpolation.lipi-extended" }
      },
      "contentName": "meta.embedded meta.embedded.line meta.template.expression",
      "patterns": [{ "include": "#expression" }]
    },
    "expression-literal-string-triple-raw": {
      "comment": "Raw strings delimited with three pairs of double quotes",
      "name": "string.quoted.triple.raw.lipi-extended",
      "begin": "r(%*)\"{3}",
      "end": "\"{3}\\1"
    },
    "expression-literal-string-triple": {
      "comment": "Regular strings delimited with three pairs of double quotes",
      "name": "string.quoted.triple.lipi-extended",
      "begin": "(%*)\"{3}",
      "end": "\"{3}\\1",
      "patterns": [
        { "include": "#expression-literal-string-interpolated-content" },
        { "include": "#expression-literal-string-escape" }
      ]
    },
    "expression-literal-string-raw": {
      "comment": "Raw strings delimited with one pair of double quotes",
      "name": "string.quoted.double.raw.lipi-extended",
      "begin": "r(%*)\"",
      "end": "\"\\1"
    },
    "expression-literal-string": {
      "comment": "Regular strings delimited with one pair of double quotes",
      "name": "string.quoted.double.lipi-extended",
      "begin": "(%*)\"",
      "end": "\"\\1",
      "patterns": [
        { "include": "#expression-literal-string-interpolated-content" },
        { "include": "#expression-literal-string-escape" }
      ]
    }
  },
  "scopeName": "source.lipi-extended"
}
