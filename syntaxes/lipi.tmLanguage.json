{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Lipi",
  "patterns": [
    { "include": "#comment" },
    { "include": "#annotation" },
    { "include": "#atom" }
  ],
  "repository": {
    "comment": {
      "patterns": [
        { "include": "#comment-shebang" },
        { "include": "#comment-line" },
        { "include": "#comment-block" }
      ]
    },
    "comment-shebang": {
      "name": "comment.line.lipi",
      "begin": "^#!",
      "end": "\n"
    },
    "comment-line": {
      "name": "comment.line.lipi",
      "begin": ";",
      "end": "\n"
    },
    "comment-block": {
      "name": "comment.block.lipi",
      "begin": "#_(%*)\\(",
      "end": "\\)\\1",
      "patterns": [{ "include": "#comment-block" }]
    },
    "annotation": {
      "patterns": [
        { "include": "#annotation-symbol" },
        { "include": "#annotation-parenthesis" },
        { "include": "#annotation-bracket" },
        { "include": "#annotation-brace" }
      ]
    },
    "annotation-symbol": {
      "name": "entity.name.type.lipi",
      "match": "\\^(?:[[:alpha:]!$?*\\-=_+<>.?][\\/[:alnum:]!$?*\\-=_+<>.?]*)"
    },
    "annotation-parenthesis": {
      "name": "entity.name.type.lipi",
      "begin": "\\^\\(",
      "end": "\\)",
      "patterns": [{ "include": "#annotation-nested-sexp" }]
    },
    "annotation-bracket": {
      "name": "entity.name.type.lipi",
      "begin": "\\^\\[",
      "end": "\\]",
      "patterns": [{ "include": "#annotation-nested-sexp" }]
    },
    "annotation-brace": {
      "name": "entity.name.type.lipi",
      "begin": "\\^\\{",
      "end": "\\}",
      "patterns": [{ "include": "#annotation-nested-sexp" }]
    },
    "annotation-nested-sexp": {
      "name": "entity.name.type.lipi",
      "begin": "\\(",
      "end": "\\)",
      "patterns": [{ "include": "#annotation-nested-sexp" }]
    },
    "atom": {
      "patterns": [
        { "include": "#atom-keyword" },
        { "include": "#atom-indexed-parameter" },
        { "include": "#atom-number" },
        { "include": "#atom-character" },
        { "include": "#atom-string" },
        { "include": "#atom-sexp" }
      ]
    },
    "atom-keyword": {
      "name": "entity.name.tag.lipi",
      "match": ":{1,2}@?([[:alpha:]!$?*\\-=_+<>.?][\\/[:alnum:]!$?*\\-=_+<>.?]*)"
    },
    "atom-indexed-parameter": {
      "name": "entity.name.tag.lipi",
      "match": "(?<=^|[(\\[\\{\\s])%[[:digit:]]*(?=[\\s\\}\\]\\)])"
    },
    "atom-number": {
      "patterns": [
        { "include": "#atom-number-custom-base" },
        { "include": "#atom-number-default-base" }
      ]
    },
    "atom-number-custom-base": {
      "name": "constant.numeric.lipi",
      "match": "(?<=^|[\\(\\[\\{\\s])(?<!%)~?#([box]|[[:digit:]]+)'[[:alnum:]][[:alnum:],]*('e[+\\-]?[[:digit:]]+)?(?=[\\s\\}\\]\\)])"
    },
    "atom-number-default-base": {
      "name": "constant.numeric.lipi",
      "match": "(?<=^|[\\(\\[\\{\\s])~?[[:digit:]][[:digit:],]*(?:\\.[[:digit:],]*)?('e[+\\-]?[[:digit:]]+)?(?=[\\s\\}\\]\\)])"
    },
    "atom-character": {
      "name": "string.other.lipi",
      "match": "\\\\(?:\\\\(u\\{[[:alnum:]]*}|[^\\s\\}\\]\\)]+)|.(?=[\\s\\}\\]\\)]))"
    },
    "atom-string": {
      "patterns": [
        { "include": "#atom-string-triple-raw" },
        { "include": "#atom-string-triple-static" },
        { "include": "#atom-string-single-raw" },
        { "include": "#atom-string-single-static" }
      ]
    },
    "atom-string-escape": {
      "match": "\\\\(?:[0bfnrst\\s\\n\\\\]|x[a-fA-F0-9]{2}|u\\{[a-fA-F0-9]{2,6}\\}|(.))",
      "captures": {
        "0": { "name": "constant.character.escape.lipi" },
        "1": { "name": "invalid.lipi" }
      }
    },
    "atom-string-triple-raw": {
      "name": "string.quoted.lipi",
      "begin": "#\"{3}",
      "end": "\"{3}"
    },
    "atom-string-triple-static": {
      "name": "string.quoted.lipi",
      "begin": "\"{3}",
      "end": "\"{3}",
      "patterns": [{ "include": "#atom-string-escape" }]
    },
    "atom-string-single-raw": {
      "name": "string.quoted.lipi",
      "begin": "#\"{1}",
      "end": "\"{1}"
    },
    "atom-string-single-static": {
      "name": "string.quoted.lipi",
      "begin": "\"{1}",
      "end": "\"{1}",
      "patterns": [{ "include": "#atom-string-escape" }]
    },
    "atom-sexp": {
      "begin": "(?<!')\\(\\s*(?!:)(?:(->{1,2}|and|case|cond|declare|def[\\.~!%^&*\\-=_+|\\\\:'<>\\/?\\p{L}\\p{Sm}\\p{Sc}\\p{M}\\p{N}]*|derives|do|forall|fn|if(?:-let)?|let|modulus|or|range|(?:import|use|using)|(?:first|last)|(?:either|record|union))(?=[\\s\\)])|(@?[\\.~!^&*\\-=_+|\\\\:'<>\\/?\\p{L}\\p{Sm}\\p{Sc}][\\.~!%^&*\\-=_+|\\\\:'<>\\/?\\p{L}\\p{Sm}\\p{Sc}\\p{M}\\p{N}]*))",
      "end": "\\)",
      "beginCaptures": {
        "1": { "name": "storage.type.lipi keyword.other.lipi" },
        "2": { "name": "entity.name.function.lipi" }
      },
      "patterns": [{ "include": "$self" }]
    }
  },
  "scopeName": "source.lipi"
}
